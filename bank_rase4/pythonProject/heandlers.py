import datetime
import glob
import json
import time
from datetime import date


import os

from aiogram import types, F, Router, Bot
from aiogram.client import bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.methods import send_document
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, FSInputFile
from aiogram.filters import Command, state
import matplotlib.pyplot as plt
import requests
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
TOKEN = "7294731861:AAFWSoNcHBM5n5H81pPopGEnEGGM128iEh8"

bot = Bot(token=TOKEN)


class Reg(StatesGroup):
    metal_id = State()
    startDate = State()
    endDate = State()


class Reg1(StatesGroup):
    metal = State()
    sum = State()


class Reg2(StatesGroup):
    metal = State()
    sum = State()


@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –¥–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã –∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    await msg.answer("–î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞–∂–º–∏—Ç–µ /info")


@router.message(Command("cod"))
async def cod(msg: Message):
    await msg.answer("456 —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å\n"
                     "431 –¥–æ–ª–ª–∞—Ä –°–®–ê\n"
                     "451 –ï–≤—Ä–æ\n"
                     "0 –∑–æ–ª–æ—Ç–æ\n"
                     "1 —Å–µ—Ä–µ–±—Ä–æ\n"
                     "2 –ø–ª–∞—Ç–∏–Ω–∞\n"
                     "3 –ø–∞–ª–∞–¥–∏–π\n")


@router.message(Command("info"))
async def info(msg: Message):
    await msg.reply("/cod –∫–æ–¥—ã –≤–∞–ª—é—Ç \n"
                    "/rub 100 —Ä—É–±–ª–µ–π —Ä–æ—Å—Å–∏–∏\n"
                    "/usd –¥–æ–ª–ª–∞—Ä –°–®–ê \n"
                    "/euro –ï–≤—Ä–æ\n"
                    "/gold –∑–æ–ª–æ—Ç–æ\n"
                    "/silver —Å–µ—Ä–µ–±—Ä–æ\n"
                    "/platinum –ø–ª–∞—Ç–∏–Ω–∞\n"
                    "/palladium –ø–∞–ª–ª–∞–¥–∏–π\n"
                    "/catalog –ø–∞–º—è—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã\n"
                    "/metal_period_analytic –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
                    "/convert –ø–µ—Ä–µ–≤–æ–¥ –≤ –≤–∞–ª—é—Ç—É\n"
                    "/convert1 –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ —Ä—É–±–ª–∏\n")


@router.message(Command("rub"))
async def rub(msg: Message):
    ADRESS = "https://api.nbrb.by/exrates/rates/456"
    response = requests.get(ADRESS).json()
    await msg.answer(str(response['Cur_OfficialRate']))


@router.message(Command("usd"))
async def usd(msg: Message):
    ADRESS = "https://api.nbrb.by/exrates/rates/431"
    response = requests.get(ADRESS).json()
    await msg.answer(str(response['Cur_OfficialRate']))


@router.message(Command("euro"))
async def euro(msg: Message):
    ADRESS = "https://api.nbrb.by/exrates/rates/451"
    response = requests.get(ADRESS).json()
    await msg.answer(str(response['Cur_OfficialRate']))


@router.message(Command("gold"))
async def gold(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/0"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()
    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))


@router.message(Command("silver"))
async def silver(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/1"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()
    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ —Å–µ—Ä–µ–±—Ä–∞ –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))


@router.message(Command("platinum"))
async def platinum(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/2"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()
    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ –ø–ª–∞—Ç–∏–Ω—ã –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))


@router.message(Command("palladium"))
async def palladium(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/3"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()
    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ –ø–∞–ª–ª–∞–¥–∏—è –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))


@router.message(Command("catalog"))
async def catalog(msg: Message):
    await msg.answer("–∫–∞—Ç–∞–ª–æ–≥ –ø–∞–º—è—Ç–Ω—ã—Ö –º–æ–Ω–µ—Ç: https://www.nbrb.by/today/services/coins/avail/1/print ")


@router.message(Command("metal_period_analytic"))
async def gold_period_analytic(msg: Message):
    main_kb = InlineKeyboardBuilder()
    gold = InlineKeyboardButton(text='üíõ–∑–æ–ª–æ—Ç–æ', callback_data='https://api.nbrb.by/bankingots/prices/0')
    silver = InlineKeyboardButton(text='ü§ç—Å–µ—Ä–µ–±—Ä–æ', callback_data='https://api.nbrb.by/bankingots/prices/1')
    platinum = InlineKeyboardButton(text='ü©∂–ø–ª–∞—Ç–∏–Ω–∞', callback_data='https://api.nbrb.by/bankingots/prices/2')
    palladium = InlineKeyboardButton(text='üíô–ø–∞–ª–ª–∞–¥–∏–π', callback_data='https://api.nbrb.by/bankingots/prices/3')
    main_kb.add(gold, silver, platinum, palladium)
    main_kb = main_kb.as_markup()
    await msg.answer("–í—ã–±–∏—Ä–∏—Ç–µ –º–µ—Ç–∞–ª–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=main_kb)


@router.callback_query(F.data == 'https://api.nbrb.by/bankingots/prices/0')
async def gold(callback: CallbackQuery, state: FSMContext):
    global Adress1
    Adress1 = 'https://api.nbrb.by/bankingots/prices/0'
    await callback.answer('')
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–æ–ª–æ—Ç–æ')
    await state.set_state(Reg.startDate)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ YYYY.DD.MM::')


@router.callback_query(F.data == 'https://api.nbrb.by/bankingots/prices/1')
async def gold(callback: CallbackQuery, state: FSMContext):
    global Adress1
    Adress1 = 'https://api.nbrb.by/bankingots/prices/1'
    await callback.answer('')
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–µ–±—Ä–æ')
    await state.set_state(Reg.startDate)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ YYYY.DD.MM::')


@router.callback_query(F.data == 'https://api.nbrb.by/bankingots/prices/2')
async def gold(callback: CallbackQuery, state: FSMContext):
    global Adress1
    Adress1 = 'https://api.nbrb.by/bankingots/prices/2'
    await callback.answer('')
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç–∏–Ω—É')
    await state.set_state(Reg.startDate)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ YYYY.DD.MM:')


@router.callback_query(F.data == 'https://api.nbrb.by/bankingots/prices/3')
async def gold(callback: CallbackQuery, state: FSMContext):
    global Adress1
    Adress1 = "https://api.nbrb.by/bankingots/prices/3"
    await callback.answer('')
    await callback.message.delete()
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ª–∞–¥–∏–π')
    await state.set_state(Reg.startDate)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ YYYY.DD.MM:')


@router.message(Reg.startDate)
async def reg(msg: Message, state: FSMContext):
    await state.update_data(startDate=msg.text)
    await state.set_state(Reg.endDate)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ YYYY.DD.MM: ")


@router.message(Reg.endDate)
async def reg2(msg: Message, state: FSMContext):
    await state.update_data(endDate=msg.text)
    data = await state.get_data()
    date_obj = datetime.datetime.strptime(data["startDate"], '%Y.%m.%d')
    date_obj1 = datetime.datetime.strptime(data["endDate"], '%Y.%m.%d')
    print(date_obj)
    params = {"startDate": date_obj, "endDate": date_obj1}
    response = requests.get(Adress1, params=params).json()

    match Adress1:
        case "https://api.nbrb.by/bankingots/prices/0":
            name = "–ó–æ–ª–æ—Ç–∞"

        case "https://api.nbrb.by/bankingots/prices/1":
            name = "—Å–µ—Ä–µ–±—Ä–∞"

        case "https://api.nbrb.by/bankingots/prices/2":
            name = "–ø–ª–∞—Ç–∏–Ω—ã"

        case "https://api.nbrb.by/bankingots/prices/3":
            name = "–ø–∞–ª–ª–∞–¥–∏—è"
    value = []
    Date = []
    count = 0
    for item in response:
        Date.insert(count, item['Date'])
        value.insert(count, item['Value'])
        t = str(item['Date'])
        t = t.replace("T00:00:00", " ")
        await msg.answer("—Ü–µ–Ω–∞ " + name + " –∑–∞ –≥—Ä–∞–º–º –Ω–∞ " + t + " —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç : " + str(item['Value']))
        count = count + 1
    print(Date)
    print(value)
    plt.plot(Date, value)
    # plt.show()
    plt.savefig('Figure_1.png')
    chat_id = msg.chat.id
    print(chat_id)
    photo = open('Figure_1.png', 'rb')
    if os.path.isfile('Figure_1.png'):
        print("—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("–Ω–µ—Ç")
    await bot.send_document(chat_id, photo)
    # with open(f"Figure_1.png", "rb") as photo_file:
    #    await bot.send_photo(chat_id, photo=photo_file)
    await state.clear()


@router.message(Command("convert"))
async def gold(msg: Message, state: FSMContext):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É rub, usd, euro')
    await state.set_state(Reg1.metal)


@router.message(Reg1.metal)
async def reg(msg: Message, state: FSMContext):
    await state.update_data(metal=msg.text)
    await state.set_state(Reg1.sum)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –±–µ–ª–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö: ")


@router.message(Reg1.sum)
async def reg(msg: Message, state: FSMContext):
    await state.update_data(sum=float(msg.text))
    await state.set_state(Reg1.sum)
    data = await state.get_data()
    match data["metal"]:
        case "usd":
            name = "https://api.nbrb.by/exrates/rates/431"

        case "euro":
            name = "https://api.nbrb.by/exrates/rates/451"

        case "rub":
            name = "https://api.nbrb.by/exrates/rates/456"
    response = requests.get(name).json()
    if (name == "https://api.nbrb.by/exrates/rates/456"):
        answer = str(round(data["sum"] / float(response['Cur_OfficialRate']) * 100, 3))
    else:
        answer = str(round(data["sum"] / float(response['Cur_OfficialRate']), 3))
    await msg.answer(
        "–°–µ–≥–æ–¥–Ω—è –Ω–∞ —Å—É–º–º—É " + str(data["sum"]) + " –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å : " + answer + data["metal"])


@router.message(Command("convert1"))
async def gold(msg: Message, state: FSMContext):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É rub, usd, euro')
    await state.set_state(Reg2.metal)


@router.message(Reg2.metal)
async def reg(msg: Message, state: FSMContext):
    await state.update_data(metal=msg.text)
    await state.set_state(Reg2.sum)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ " + msg.text + ":")


@router.message(Reg2.sum)
async def reg(msg: Message, state: FSMContext):
    await state.update_data(sum=float(msg.text))
    await state.set_state(Reg2.sum)
    data = await state.get_data()
    match data["metal"]:
        case "usd":
            name = "https://api.nbrb.by/exrates/rates/431"

        case "euro":
            name = "https://api.nbrb.by/exrates/rates/451"

        case "rub":
            name = "https://api.nbrb.by/exrates/rates/456"
    response = requests.get(name).json()

    if (name == "https://api.nbrb.by/exrates/rates/456"):
        answer = str(round(data["sum"] * float(response['Cur_OfficialRate']) / 100, 3))
    else:
        answer = str(round(data["sum"] * float(response['Cur_OfficialRate']), 3))
    await msg.answer("–°–µ–≥–æ–¥–Ω—è –Ω–∞ —Å—É–º–º—É " + str(data["sum"]) + data[
        "metal"] + " –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å : " + answer + " –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö —Ä—É–±–ª–µ–π")


@router.message(Command("Check_palladium"))
async def palladium(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/3"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()
    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ –ø–∞–ª–ª–∞–¥–∏—è –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))


@router.message(Command("Check_gold"))
async def palladium(msg: Message):
    ADRESS = "https://api.nbrb.by/bankingots/prices/0"
    params = {"startDate": date.today(), "endDate": date.today()}
    response = requests.get(ADRESS, params=params).json()

    for item in response:
        await msg.answer("—Ü–µ–Ω–∞ –∑–æ–ª–æ—Ç–∞ –∑–∞ –≥—Ä–∞–º–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: " + str(item['Value']))
